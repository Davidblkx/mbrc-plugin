<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MB_REMOTE</name>
    </assembly>
    <members>
        <member name="T:AndroidRemote.Utilities.Authenticator">
            <summary>
            Responsible for the client authentication. Keeps a list of the connected clients.
            </summary>
        </member>
        <member name="M:AndroidRemote.Utilities.Authenticator.IsClientAuthenticated(System.Int32)">
            <summary>
            Returns if a clients has passed the authentication stage and thus can receive data.
            </summary>
            <param name="clientId">Represents the id of client</param>
            <returns>true or false depending on the authentication state of the client</returns>
        </member>
        <member name="M:AndroidRemote.Utilities.Authenticator.RemoveClientOnDisconnect(AndroidRemote.Events.MessageEventArgs)">
            <summary>
             Removes a client from the Client List when the client disconnects from the server.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AndroidRemote.Utilities.Authenticator.AddClientOnConnect(AndroidRemote.Events.MessageEventArgs)">
            <summary>
            Adds a client to the Client List when the client connects to the server. In case a client
            already exists with the specified id then the old client entry is removed before the adding
            the new one.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AndroidRemote.Utilities.Authenticator.Client(System.Int32)">
            <summary>
            Given a client id the function returns a SocketClient object.
            </summary>
            <param name="id">The client id.</param>
            <returns>A SocketClient object.</returns>
        </member>
        <member name="T:AndroidRemote.Networking.SocketPacket">
            <summary>
            
            </summary>
        </member>
        <member name="M:AndroidRemote.Networking.SocketPacket.#ctor(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="clientNumber"></param>
        </member>
        <member name="P:AndroidRemote.Networking.SocketPacket.MCurrentSocket">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Networking.SocketPacket.MClientNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Networking.SocketPacket.DataBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AndroidRemote.Error.ErrorHandler.LogError(System.Exception)">
            <summary>
            Given an Exception it logs the time and the exception message to the log file stored in the _logFilePath
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:AndroidRemote.Error.ErrorHandler.SetLogFilePath(System.String)">
            <summary>
            Sets the path where the Errors will be logged
            </summary>
            <param name="path">Path to store the log file.</param>
            <returns></returns>
        </member>
        <member name="T:AndroidRemote.Interfaces.IPlugin">
            <summary>
            Represents the basic functionality of the plugin
            </summary>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestNextTrack(System.Int32)">
            <summary>
            When called plays the next track.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestStopPlayback(System.Int32)">
            <summary>
            When called stops the playback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestPlayPauseTrack(System.Int32)">
            <summary>
            When called changes the play/pause state or starts playing a track if the status is stopped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestPreviousTrack(System.Int32)">
            <summary>
            When called plays the previous track.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestVolumeChange(System.Int32)">
            <summary>
            When called if the volume string is an integer in the range [0,100] it 
            changes the volume to the specific value and returns the new value.
            In any other case it just returns the current value for the volume.
            </summary>
            <param name="volume"> </param>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestShuffleState(AndroidRemote.Utilities.StateAction)">
            <summary>
            Changes the player shuffle state. If the StateAction is Toggle then the current state is switched with it's opposite,
            if it is State the current state is dispatched with an Event.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestMuteState(AndroidRemote.Utilities.StateAction)">
            <summary>
            Changes the player mute state. If the StateAction is Toggle then the current state is switched with it's opposite,
            if it is State the current state is dispatched with an Event.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestScrobblerState(AndroidRemote.Utilities.StateAction)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestRepeatState(AndroidRemote.Utilities.StateAction)">
            <summary>
            If the action equals toggle then it changes the repeat state, in any other case
            it just returns the current value of the repeat.
            </summary>
            <param name="action">toggle or state</param>
            <returns>Repeat state: None, All, One</returns>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestNowPlayingList(System.Double,System.Int32)">
            <summary>
            It gets the 100 first tracks of the playlist and returns them in an XML formated String without a root element.
            </summary>
            <param name="clientProtocolVersion"> </param>
            <param name="clientId"> </param>
            <returns>XML formated string without root element</returns>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.PlaylistGoToSpecifiedTrack(System.String)">
            <summary>
            Searches in the Now playing list for the track specified and plays it.
            </summary>
            <param name="trackInfo">The track to play</param>
            <returns></returns>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestTrackRating(System.String,System.Int32)">
            <summary>
            If the given rating string is not null or empty and the value of the string is a float number in the [0,5]
            the function will set the new rating as the current track's new track rating. In any other case it will
            just return the rating for the current track.
            </summary>
            <param name="rating">New Track Rating</param>
            <param name="clientId"> </param>
            <returns>Track Rating</returns>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestNowPlayingTrackLyrics">
            <summary>
            Requests the Now Playing track lyrics. If the lyrics are available then they are dispatched along with
            and event. If not, and the ApiRevision is equal or greater than r17 a request for the downloaded lyrics
            is initiated. The lyrics are dispatched along with and event when ready.
            </summary>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestNowPlayingTrackCover">
            <summary>
            Requests the Now Playing Track Cover. If the cover is available it is dispatched along with an event.
            If not, and the ApiRevision is equal or greater than r17 a request for the downloaded artwork is
            initiated. The cover is dispatched along with an event when ready.
            </summary>
        </member>
        <member name="M:AndroidRemote.Interfaces.IPlugin.RequestPlayPosition(System.String)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="E:AndroidRemote.Interfaces.IPlugin.PlayerStateChanged">
            <summary>
            Represents a change in the state of the player.
            </summary>
        </member>
        <member name="T:AndroidRemote.Events.DataEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:AndroidRemote.Events.DataEventArgs.#ctor(AndroidRemote.Events.EventDataType,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="stringData"></param>
            <param name="clientId"> </param>
        </member>
        <member name="M:AndroidRemote.Events.DataEventArgs.#ctor(AndroidRemote.Events.EventDataType,AndroidRemote.Enumerations.PlayerState)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="playState"></param>
        </member>
        <member name="M:AndroidRemote.Events.DataEventArgs.#ctor(AndroidRemote.Events.EventDataType,AndroidRemote.Enumerations.Repeat)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="repeatMode"></param>
        </member>
        <member name="M:AndroidRemote.Events.DataEventArgs.#ctor(AndroidRemote.Events.EventDataType,AndroidRemote.Entities.TrackInfo)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="track"></param>
        </member>
        <member name="M:AndroidRemote.Events.DataEventArgs.#ctor(AndroidRemote.Events.EventDataType,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="stringData"></param>
        </member>
        <member name="M:AndroidRemote.Events.DataEventArgs.#ctor(AndroidRemote.Events.EventDataType,System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="intData"></param>
        </member>
        <member name="M:AndroidRemote.Events.DataEventArgs.#ctor(AndroidRemote.Events.EventDataType,System.Single)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="floatData"></param>
        </member>
        <member name="M:AndroidRemote.Events.DataEventArgs.#ctor(AndroidRemote.Events.EventDataType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="boolData"></param>
        </member>
        <member name="M:AndroidRemote.Events.DataEventArgs.#ctor(AndroidRemote.Events.EventDataType)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:AndroidRemote.Events.DataEventArgs.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Events.DataEventArgs.StringData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Events.DataEventArgs.IntData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Events.DataEventArgs.FloatData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Events.DataEventArgs.BoolData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Events.DataEventArgs.TrackData">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Events.DataEventArgs.RepeatMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Events.DataEventArgs.PlayState">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Events.DataEventArgs.ClientId">
            <summary>
            
            </summary>
        </member>
        <member name="M:AndroidRemote.Settings.UserSettings.WriteNodeValue(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Writes an XML node.
            </summary>
            <param name="document">The XML document.</param>
            <param name="name">Name of the node.</param>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:AndroidRemote.Settings.UserSettings.SaveSettings(System.String)">
            <summary>
            Saves the settings.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:AndroidRemote.Settings.UserSettings.LoadSettings">
            <summary>
            Loads the settings.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:MusicBeePlugin.Plugin">
            <summary>
            The MusicBee Plugin class. Used to communicate with the MusicBee API.
            </summary>
        </member>
        <member name="M:MusicBeePlugin.Plugin.Initialise(System.IntPtr)">
            <summary>
            This function initialized the Plugin.
            </summary>
            <param name="apiInterfacePtr"></param>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.Configure(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="panelHandle"></param>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.Close(MusicBeePlugin.Plugin.PluginCloseReason)">
            <summary>
            MusicBee is closing the plugin (plugin is being disabled by user or MusicBee is shutting down)
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:MusicBeePlugin.Plugin.Uninstall">
            <summary>
            Cleans up any persisted files during the plugin uninstall.
            </summary>
        </member>
        <member name="M:MusicBeePlugin.Plugin.SaveSettings">
            <summary>
            Called by MusicBee when the user clicks Apply or Save in the MusicBee Preferences screen.
            Used to save the temporary Plugin Settings if the have changed.
            </summary>
        </member>
        <member name="M:MusicBeePlugin.Plugin.ReceiveNotification(System.String,MusicBeePlugin.Plugin.NotificationType)">
            <summary>
            Receives event Notifications from MusicBee. It is only required if the about.ReceiveNotificationFlags = PlayerEvents.
            </summary>
            <param name="sourceFileUrl"></param>
            <param name="type"></param>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestNextTrack(System.Int32)">
            <summary>
            When called plays the next track.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestStopPlayback(System.Int32)">
            <summary>
            When called stops the playback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestPlayPauseTrack(System.Int32)">
            <summary>
            When called changes the play/pause state or starts playing a track if the status is stopped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestPreviousTrack(System.Int32)">
            <summary>
            When called plays the previous track.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestVolumeChange(System.Int32)">
            <summary>
            When called if the volume string is an integer in the range [0,100] it 
            changes the volume to the specific value and returns the new value.
            In any other case it just returns the current value for the volume.
            </summary>
            <param name="volume"> </param>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestShuffleState(AndroidRemote.Utilities.StateAction)">
            <summary>
            Changes the player shuffle state. If the StateAction is Toggle then the current state is switched with it's opposite,
            if it is State the current state is dispatched with an Event.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestMuteState(AndroidRemote.Utilities.StateAction)">
            <summary>
            Changes the player mute state. If the StateAction is Toggle then the current state is switched with it's opposite,
            if it is State the current state is dispatched with an Event.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestScrobblerState(AndroidRemote.Utilities.StateAction)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestRepeatState(AndroidRemote.Utilities.StateAction)">
            <summary>
            If the action equals toggle then it changes the repeat state, in any other case
            it just returns the current value of the repeat.
            </summary>
            <param name="action">toggle or state</param>
            <returns>Repeat state: None, All, One</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestNowPlayingList(System.Double,System.Int32)">
            <summary>
            It gets the 100 first tracks of the playlist and returns them in an XML formated String without a root element.
            </summary>
            <param name="clientProtocolVersion"> </param>
            <param name="clientId"> </param>
            <returns>XML formated string without root element</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlaylistGoToSpecifiedTrack(System.String)">
            <summary>
            Searches in the Now playing list for the track specified and plays it.
            </summary>
            <param name="trackInfo">The track to play</param>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestTrackRating(System.String,System.Int32)">
            <summary>
            If the given rating string is not null or empty and the value of the string is a float number in the [0,5]
            the function will set the new rating as the current track's new track rating. In any other case it will
            just return the rating for the current track.
            </summary>
            <param name="rating">New Track Rating</param>
            <param name="clientId"> </param>
            <returns>Track Rating</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestNowPlayingTrackLyrics">
            <summary>
            Requests the Now Playing track lyrics. If the lyrics are available then they are dispatched along with
            and event. If not, and the ApiRevision is equal or greater than r17 a request for the downloaded lyrics
            is initiated. The lyrics are dispatched along with and event when ready.
            </summary>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestNowPlayingTrackCover">
            <summary>
            Requests the Now Playing Track Cover. If the cover is available it is dispatched along with an event.
            If not, and the ApiRevision is equal or greater than r17 a request for the downloaded artwork is
            initiated. The cover is dispatched along with an event when ready.
            </summary>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RequestPlayPosition(System.String)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="E:MusicBeePlugin.Plugin.PlayerStateChanged">
            <summary>
            Represents a change in the state of the player.
            </summary>
        </member>
        <member name="T:AndroidRemote.Enumerations.Repeat">
            <summary>
            Represents the repeat mode of the server
            </summary>
        </member>
        <member name="F:AndroidRemote.Enumerations.Repeat.None">
            <summary>
            Represents the deactivated repeat functionality
            </summary>
        </member>
        <member name="F:AndroidRemote.Enumerations.Repeat.One">
            <summary>
            Represents the on track repeat
            </summary>
        </member>
        <member name="F:AndroidRemote.Enumerations.Repeat.All">
            <summary>
            Represents the repeat of the whole playlist
            </summary>
        </member>
        <member name="T:AndroidRemote.Entities.TrackInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:AndroidRemote.Entities.TrackInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="artist"></param>
            <param name="title"></param>
            <param name="album"></param>
            <param name="year"></param>
        </member>
        <member name="M:AndroidRemote.Entities.TrackInfo.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="artist"></param>
            <param name="title"></param>
        </member>
        <member name="M:AndroidRemote.Entities.TrackInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Entities.TrackInfo.Artist">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Entities.TrackInfo.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Entities.TrackInfo.Album">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Entities.TrackInfo.Year">
            <summary>
            
            </summary>
        </member>
        <member name="T:AndroidRemote.Utilities.StateAction">
            <summary>
            Represents a state action that has to do with the state of player functionality such as repeat,shuffle
            scrobble, mute etc.
            </summary>
        </member>
        <member name="F:AndroidRemote.Utilities.StateAction.Toggle">
            <summary>
            Represents the change to the opposite of the current state.
            </summary>
        </member>
        <member name="F:AndroidRemote.Utilities.StateAction.State">
            <summary>
            Represent a request for the current state.
            </summary>
        </member>
        <member name="T:AndroidRemote.Enumerations.PlayerState">
            <summary>
            Represents the player's play state
            </summary>
        </member>
        <member name="F:AndroidRemote.Enumerations.PlayerState.Undefined">
            <summary>
            Represents an undefined state.
            </summary>
        </member>
        <member name="F:AndroidRemote.Enumerations.PlayerState.Loading">
            <summary>
            Represents a new track loading state.
            </summary>
        </member>
        <member name="F:AndroidRemote.Enumerations.PlayerState.Playing">
            <summary>
            Represents a track playing state.
            </summary>
        </member>
        <member name="F:AndroidRemote.Enumerations.PlayerState.Paused">
            <summary>
            Represents a track being paused state.
            </summary>
        </member>
        <member name="F:AndroidRemote.Enumerations.PlayerState.Stopped">
            <summary>
            Represents a track being stopped state.
            </summary>
        </member>
        <member name="T:AndroidRemote.Networking.SocketClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:AndroidRemote.Networking.SocketClient.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="clientId"></param>
        </member>
        <member name="M:AndroidRemote.Networking.SocketClient.IncreasePacketNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Networking.SocketClient.ClientId">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Networking.SocketClient.PacketNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Networking.SocketClient.Authenticated">
            <summary>
            
            </summary>
        </member>
        <member name="M:AndroidRemote.Networking.ProtocolHandler.ProcessIncomingMessage(System.String,System.Int32)">
            <summary>
            Processes the incoming message and answer's sending back the needed data.
            </summary>
            <param name="incomingMessage">The incoming message.</param>
            <param name="clientId"> </param>
        </member>
        <member name="T:MusicBeePlugin.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.InvalidPort">
            <summary>
              Looks up a localized string similar to &quot;Invalid Port Number&quot;.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.minus">
            <summary>
              Looks up a localized string similar to -.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.plus">
            <summary>
              Looks up a localized string similar to +.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.ValidRange">
            <summary>
              Looks up a localized string similar to &quot;A valid port number is a number from 1 to 65535&quot;.
            </summary>
        </member>
        <member name="T:AndroidRemote.Networking.SocketServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AndroidRemote.Networking.SocketServer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AndroidRemote.Networking.SocketServer.HandleReplyAvailable(System.Object,AndroidRemote.Events.MessageEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AndroidRemote.Networking.SocketServer.HandleDisconnectClient(System.Object,AndroidRemote.Events.MessageEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AndroidRemote.Networking.SocketServer.Stop">
            <summary>
            It stops the SocketServer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AndroidRemote.Networking.SocketServer.Start">
            <summary>
            It starts the SocketServer.
            </summary>
            <returns></returns>
        </member>
        <member name="E:AndroidRemote.Networking.SocketServer.ClientConnected">
            <summary>
            
            </summary>
        </member>
        <member name="E:AndroidRemote.Networking.SocketServer.ClientDisconnected">
            <summary>
            
            </summary>
        </member>
        <member name="P:AndroidRemote.Networking.SocketServer.IsRunning">
            <summary>
            
            </summary>
        </member>
        <member name="T:AndroidRemote.Events.EventDataType">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
