<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MB_REMOTE</name>
    </assembly>
    <members>
        <member name="M:MusicBeePlugin.IPlugin.RetrieveCurrentTrackLyrics">
            <summary>
            Retrieves the lyrics for the track playing.
            </summary>
            <returns>Lyrics String</returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlayerPlayNextTrack">
            <summary>
            When called plays the next track.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlayerStopPlayback">
            <summary>
            When called stops the playback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlayerPlayPauseTrack">
            <summary>
            When called changes the play/pause state or starts playing a track if the status is stopped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlayerPlayPreviousTrack">
            <summary>
            When called plays the previous track.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlayerVolume(System.String)">
            <summary>
            When called if the volume string is an integer in the range [0,100] it 
            changes the volume to the specific value and returns the new value.
            In any other case it just returns the current value for the volume.
            </summary>
            <param name="vol">New volume String</param>
            <returns>Volume int [0,100]</returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlayerPlayState">
            <summary>
            Returns the state of the player.
            </summary>
            <returns>possible values: undefined, loading, playing, paused, stopped</returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlayerShuffleState(System.String)">
            <summary>
            If the action equals toggle then it changes the shuffle state, in any other case
            it just returns the current value of the shuffle.
            </summary>
            <param name="action">toggle or state</param>
            <returns>Shuffle state: True or False</returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlayerRepeatState(System.String)">
            <summary>
            If the action equals toggle then it changes the repeat state, in any other case
            it just returns the current value of the repeat.
            </summary>
            <param name="action">toggle or state</param>
            <returns>Repeat state: None, All, One</returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlayerMuteState(System.String)">
            <summary>
            If the action is toggle then the function changes the repeat state, in any other case
            it just returns the current value of the Mute.
            </summary>
            <param name="action">toggle or state</param>
            <returns>Mute state: True or False</returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlaylistGetTracks(System.Double)">
            <summary>
            It gets the 100 first tracks of the playlist and returns them in an XML formated String without a root element.
            </summary>
            <param name="clientProtocolVersion"> </param>
            <returns>XML formated string without root element</returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.PlaylistGoToSpecifiedTrack(System.String)">
            <summary>
            Searches in the Now playing list for the track specified and plays it.
            </summary>
            <param name="trackInfo">The track to play</param>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.ScrobblerState(System.String)">
            <summary>
            If the action is toggle then the function changes the scrobbler state, in any other case
            it just returns the current value of the Scrobbler.
            </summary>
            <param name="action">toggle or action</param>
            <returns>Scrobbler state</returns>
        </member>
        <member name="M:MusicBeePlugin.IPlugin.TrackRating(System.String)">
            <summary>
            If the given rating string is not null or empty and the value of the string is a float number in the [0,5]
            the function will set the new rating as the current track's new track rating. In any other case it will
            just return the rating for the current track.
            </summary>
            <param name="rating">New Track Rating</param>
            <returns>Track Rating</returns>
        </member>
        <member name="P:MusicBeePlugin.IPlugin.CurrentTrackArtist">
            <summary>
            Returns the artist name for the track playing.
            </summary>
            <value> Track artist string </value>
        </member>
        <member name="P:MusicBeePlugin.IPlugin.CurrentTrackAlbum">
            <summary>
            Returns the album for the track playing.
            </summary>
            <value> Track album string </value>
        </member>
        <member name="P:MusicBeePlugin.IPlugin.CurrentTrackTitle">
            <summary>
            Returns the title for the track playing.
            </summary>
            <value> Track title string </value>
        </member>
        <member name="P:MusicBeePlugin.IPlugin.CurrentTrackYear">
            <summary>
            Returns the Year for the track playing.
            </summary>
            <value> Track year string </value>
        </member>
        <member name="P:MusicBeePlugin.IPlugin.CurrentTrackCover">
            <summary>
            It retrieves the album cover as a Base64 encoded string for the track playing it resizes it to
            300x300 and returns the resized image in a Base64 encoded string.
            </summary>
            <value> </value>
        </member>
        <member name="T:MusicBeePlugin.Plugin">
            <summary>
            The MusicBee Plugin class. Used to communicate with the MusicBee API.
            </summary>
        </member>
        <member name="M:MusicBeePlugin.Plugin.Initialise(System.IntPtr)">
            <summary>
            This function initialized the Plugin.
            </summary>
            <param name="apiInterfacePtr"></param>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.Configure(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="panelHandle"></param>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.Close(MusicBeePlugin.Plugin.PluginCloseReason)">
            <summary>
            MusicBee is closing the plugin (plugin is being disabled by user or MusicBee is shutting down)
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:MusicBeePlugin.Plugin.Uninstall">
            <summary>
            Cleans up any persisted files during the plugin uninstall.
            </summary>
        </member>
        <member name="M:MusicBeePlugin.Plugin.SaveSettings">
            <summary>
            Called by MusicBee when the user clicks Apply or Save in the MusicBee Preferences screen.
            Used to save the temporary Plugin Settings if the have changed.
            </summary>
        </member>
        <member name="M:MusicBeePlugin.Plugin.ReceiveNotification(System.String,MusicBeePlugin.Plugin.NotificationType)">
            <summary>
            Receives event Notifications from MusicBee. It is only required if the about.ReceiveNotificationFlags = PlayerEvents.
            </summary>
            <param name="sourceFileUrl"></param>
            <param name="type"></param>
        </member>
        <member name="M:MusicBeePlugin.Plugin.RetrieveCurrentTrackLyrics">
            <summary>
            Retrieves the lyrics for the track playing.
            </summary>
            <returns>Lyrics String</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlayerPlayNextTrack">
            <summary>
            When called plays the next track.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlayerStopPlayback">
            <summary>
            When called stops the playback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlayerPlayPauseTrack">
            <summary>
            When called changes the play/pause state or starts playing a track if the status is stopped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlayerPlayPreviousTrack">
            <summary>
            When called plays the previous track.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlayerVolume(System.String)">
            <summary>
            When called if the volume string is an integer in the range [0,100] it 
            changes the volume to the specific value and returns the new value.
            In any other case it just returns the current value for the volume.
            </summary>
            <param name="vol">New volume String</param>
            <returns>Volume int [0,100]</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlayerPlayState">
            <summary>
            Returns the state of the player.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns>possible values: undefined, loading, playing, paused, stopped</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlayerShuffleState(System.String)">
            <summary>
            If the action equals toggle then it changes the shuffle state, in any other case
            it just returns the current value of the shuffle.
            </summary>
            <param name="action">toggle or state</param>
            <returns>Shuffle state: True or False</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlayerRepeatState(System.String)">
            <summary>
            If the action equals toggle then it changes the repeat state, in any other case
            it just returns the current value of the repeat.
            </summary>
            <param name="action">toggle or state</param>
            <returns>Repeat state: None, All, One</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlayerMuteState(System.String)">
            <summary>
            If the action is toggle then the function changes the repeat state, in any other case
            it just returns the current value of the Mute.
            </summary>
            <param name="action">toggle or state</param>
            <returns>Mute state: True or False</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlaylistGetTracks(System.Double)">
            <summary>
            It gets the 100 first tracks of the playlist and returns them in an XML formated String without a root element.
            </summary>
            <param name="clientProtocolVersion"> </param>
            <returns>XML formated string without root element</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.PlaylistGoToSpecifiedTrack(System.String)">
            <summary>
            Searches in the Now playing list for the track specified and plays it.
            </summary>
            <param name="trackInfo">The track to play</param>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.ScrobblerState(System.String)">
            <summary>
            If the action is toggle then the function changes the scrobbler state, in any other case
            it just returns the current value of the Scrobbler.
            </summary>
            <param name="action">toggle or action</param>
            <returns>Scrobbler state</returns>
        </member>
        <member name="M:MusicBeePlugin.Plugin.TrackRating(System.String)">
            <summary>
            If the given rating string is not null or empty and the value of the string is a float number in the [0,5]
            the function will set the new rating as the current track's new track rating. In any other case it will
            just return the rating for the current track.
            </summary>
            <param name="rating">New Track Rating</param>
            <returns>Track Rating</returns>
        </member>
        <member name="P:MusicBeePlugin.Plugin.SongChanged">
            <summary>
            Returns true if the song changed recently. If the song changed indeed then the Property returns true and changes the internal value to false.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Plugin.CurrentTrackArtist">
            <summary>
            Returns the artist name for the track playing.
            </summary>
            <value> Track artist string </value>
        </member>
        <member name="P:MusicBeePlugin.Plugin.CurrentTrackAlbum">
            <summary>
            Returns the album for the track playing.
            </summary>
            <value> Track album string </value>
        </member>
        <member name="P:MusicBeePlugin.Plugin.CurrentTrackTitle">
            <summary>
            Returns the title for the track playing.
            </summary>
            <value> Track title string </value>
        </member>
        <member name="P:MusicBeePlugin.Plugin.CurrentTrackYear">
            <summary>
            Returns the Year for the track playing.
            </summary>
            <value> Track year string </value>
        </member>
        <member name="P:MusicBeePlugin.Plugin.CurrentTrackCover">
            <summary>
            It retrieves the album cover as a Base64 encoded string for the track playing it resizes it to
            300x300 and returns the resized image in a Base64 encoded string.
            </summary>
            <value> </value>
        </member>
        <member name="M:MusicBeePlugin.Settings.UserSettings.WriteNodeValue(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Writes an XML node.
            </summary>
            <param name="document">The XML document.</param>
            <param name="name">Name of the node.</param>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:MusicBeePlugin.Settings.UserSettings.SaveSettings(System.String)">
            <summary>
            Saves the settings.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MusicBeePlugin.Settings.UserSettings.LoadSettings">
            <summary>
            Loads the settings.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MusicBeePlugin.Networking.SocketServer.Stop">
            <summary>
            It stops the SocketServer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Networking.SocketServer.Start">
            <summary>
            It starts the SocketServer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MusicBeePlugin.Networking.SocketServer.Instance">
            <summary>
            Gives access to the SocketServer single instance.
            </summary>
        </member>
        <member name="M:MusicBeePlugin.Networking.ProtocolHandler.ProcessIncomingMessage(System.String,System.Int32)">
            <summary>
            Processes the incoming message and answer's sending back the needed data.
            </summary>
            <param name="incomingMessage">The incoming message.</param>
            <param name="cliendId"> </param>
        </member>
        <member name="M:MusicBeePlugin.Error.ErrorHandler.LogError(System.Exception)">
            <summary>
            Given an Exception it logs the time and the exception message to the log file stored in the _logFilePath
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:MusicBeePlugin.Error.ErrorHandler.SetLogFilePath(System.String)">
            <summary>
            Sets the path where the Errors will be logged
            </summary>
            <param name="path">Path to store the log file.</param>
            <returns></returns>
        </member>
        <member name="T:MusicBeePlugin.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.InvalidPort">
            <summary>
              Looks up a localized string similar to &quot;Invalid Port Number&quot;.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.minus">
            <summary>
              Looks up a localized string similar to -.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.plus">
            <summary>
              Looks up a localized string similar to +.
            </summary>
        </member>
        <member name="P:MusicBeePlugin.Properties.Resources.ValidRange">
            <summary>
              Looks up a localized string similar to &quot;A valid port number is a number from 1 to 65535&quot;.
            </summary>
        </member>
    </members>
</doc>
